from pythonosc import dispatcher, osc_server
import threading
import socket
import collections
import re

# Simplified OSC Server
# Removed many filters (no increased performance?)

class OSCServer:
    
    def __init__(self, ip=None, port=9001, default_address="", debug=False):
        
        # Inputs
        # Ip and Port
        self.ip = ip or socket.gethostbyname(socket.gethostname())
        self.port = port
        # Address and debug
        self.address = default_address
        self.debug = debug
        
        # Internals
        # Server
        self._server = None
        self._server_thread = None
        self._running = False
        # Dispatcher
        self._dispatcher = dispatcher.Dispatcher()
        # Messages
        self._messages = {}
        self._message_queue = collections.deque()  
        self._queue_length = 100
        # Process Messages
        self._processing_thread = None
        self._messages_per_frame = 10
        
        # Initiate server
        self._setup_server()
       
    def _setup_server(self):
        """Sets up the OSC server and starts message processing."""
        if self._running:
            return
        try:
            # Setup the queue
            self._message_queue = collections.deque(maxlen=self._queue_length)
            # Setup dispatcher to message_handler
            self._dispatcher.map(self.address or "/*", self._message_handler)

            # Setup server
            self._server = osc_server.ThreadingOSCUDPServer((self.ip, self.port), self._dispatcher)
            self._server_thread = threading.Thread(target=self._server.serve_forever, daemon=True)
            self._server_thread.start() 
            self._running = True
            
            # Setup processing thread
            self._processing_thread = threading.Thread(target=self._process_messages, daemon=True)
            self._processing_thread.start()
            
            if self.debug:
                print(f"OSC Server started at {self.ip}:{self.port}, Default address: {self.address or '/*'}")
        
        except Exception as e:  
            print(f"OSC Server Error: {e}")
            self._server = None
   
   
    def _message_handler(self, address, *args):
        """Handles OSC messages"""
        # Single value or list
        value = args[0] if len(args) == 1 else list(args)
        if len(self._message_queue) < self._queue_length:
            self._message_queue.append((address, value)) 

    
    def _process_messages(self):
        while self._running:
            # Dynamic batch size
            queue_size = len(self._message_queue)
            msgs_to_process = min(queue_size, self._messages_per_frame * 2) 
            
            # Processing loop
            for _ in range(msgs_to_process):
                if self._message_queue:
                    address, value = self._message_queue.popleft()  
                    self._messages[address] = value
                    
                    if self.debug:
                        print(f"OSC Debug: {address} -> {value}")
         
         
    def _shutdown_server(self): 
        """Shuts down the OSC server gracefully."""
        self._server.shutdown()
        self._server_thread.join()
        self._server = None
        self._running = False
        self._message_queue.clear()
        self._processing_thread.join()
        
        if self.debug:
            print("OSC Server stopped")
            
        return None
            
    def get_messages(self):
        return self._messages
    
  